#include <cv.h>
#include <highgui.h>
#include <math.h>

using namespace cv;

int main(int argc, char** argv)
{
    VideoCapture video(1);
    Mat videoFrame;
    Mat cannyOutput,imgBW;
    vector<Vec4i> hierarchy;
    vector<vector<Point> > contours;
    vector<Moments> muCercle;
    vector<Point2f> mcCercle;

    if (video.isOpened() == false ){
        std::cout<<"Erreur ouverture video"<<std::endl;
    }

    while(! ( (cv::waitKey(1)) ==  'q' ) ){

        //recupere la videoFrame
        video >> videoFrame;
        /// Convert it to gray
        cvtColor( videoFrame, imgBW, CV_BGR2GRAY );
        /// Reduce the noise so we avoid false circle detection
        GaussianBlur(imgBW, imgBW, Size(9, 9), 2, 2 );

        vector<Vec3f> circles;
        /// Apply the Hough Transform to find the circles
        HoughCircles(imgBW, circles, CV_HOUGH_GRADIENT, 1, imgBW.rows/8, 75, 30, 0, 0 );

        /// Draw the circles detected
        for( size_t i = 0; i < circles.size(); i++ )
        {
            Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
            int radius = cvRound(circles[i][2]);
            // circle center
            circle( videoFrame, center, 3, Scalar(0,255,0), -1, 8, 0 );
            // circle outline
            circle( videoFrame, center, radius, Scalar(0,0,255), 3, 8, 0 );
        }

        /// Show your results
        namedWindow("w", CV_WINDOW_AUTOSIZE );
        imshow("w", videoFrame );
        cv::waitKey(10);
    }//tant que non stop
    cvDestroyAllWindows();
    video.release();
}
